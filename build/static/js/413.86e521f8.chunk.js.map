{"version":3,"file":"static/js/413.86e521f8.chunk.js","mappings":"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","sources":["pages/Home/index.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport {\n  Table,\n  Input,\n  Space,\n  Modal,\n  Button,\n  Form,\n  Popconfirm,\n  message,\n} from 'antd'\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\nimport { register, dellist, getlist, editlist } from '@/apis/user'\nimport './index.scss'\nconst Article = () => {\n  const columns = [\n    {\n      title: '账号',\n      dataIndex: 'username',\n      width: 220,\n    },\n    {\n      title: '昵称',\n      width: 160,\n      render: (data) => {\n        return (\n          <>\n            <div className=\"passwordC\">\n              <div>{data.nickname}</div>\n            </div>\n          </>\n        )\n      },\n    },\n    {\n      title: '邮箱',\n      dataIndex: 'email',\n      width: 220,\n    },\n    {\n      title: '头像',\n      width: 220,\n      render: (data) => {\n        return (\n          <>\n            <div className=\"imgbox\">\n              <img\n                onError={(e) => {\n                  e.target.src = require('@/assets/def.jpg')\n                }}\n                alt=\"头像\"\n                src={data.user_pic}\n              ></img>\n            </div>\n          </>\n        )\n      },\n    },\n    {\n      title: '操作',\n      render: (data) => {\n        return (\n          <Space size=\"middle\">\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon={<EditOutlined />}\n              onClick={() => onEditinfo(data)}\n            />\n            <Popconfirm\n              title=\"删除文章\"\n              description=\"确认要删除当前文章吗?\"\n              onConfirm={() => onConfirm(data)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                type=\"primary\"\n                danger\n                shape=\"circle\"\n                icon={<DeleteOutlined />}\n              />\n            </Popconfirm>\n          </Space>\n        )\n      },\n    },\n  ]\n\n  const [list, setList] = useState([])\n  // 删除\n  const onConfirm = async (data) => {\n    await dellist({ id: data.id })\n    message.success('删除成功')\n    setList(\n      list.filter((item) => {\n        return item.id !== data.id\n      })\n    )\n  }\n\n  // 弹出层\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const showModal = () => {\n    setIsModalOpen(true)\n  }\n\n  // 编辑\n  const onEditinfo = (data) => {\n    setIsRecord(data)\n    setIsModalOpen(true)\n  }\n\n  const [recordobject, setIsRecord] = useState({})\n  const [form] = Form.useForm()\n  // 提交表单\n  const handleOk = async (values) => {\n    console.log(values)\n    if (recordobject.id) {\n      let res = await editlist({ ...values, id: recordobject.id })\n      if (res.status === 1) {\n        return message.error(`修改失败:${res.message}`)\n      }\n      message.success('修改成功')\n    } else {\n      await register(values)\n      message.success('添加成功')\n    }\n    setIsModalOpen(false)\n    setIsRecord(values)\n    // setList([...list, values])\n  }\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo)\n  }\n  // const [obj, setobj] = useState({\n  //   pageSize: 2,\n  //   currentPage: 1,\n  //   total: 0,\n  // })\n  const [total, setTotal] = useState(0)\n  const [currentPage, setcurrentPage] = useState(1)\n  const [pageSize, setpageSize] = useState(5)\n\n  const onPageChange = (page, pageSize) => {\n    console.log(page)\n    // setobj({\n    //   pageSize,\n    //   currentPage: page,\n    // })\n    setcurrentPage(page)\n  }\n  const [search, setSearch] = useState(null)\n  useEffect(() => {\n    // 获取文章列表\n    async function getlistx() {\n      let res = await getlist({\n        message: search,\n        pageSize: pageSize,\n        currentPage: currentPage,\n      })\n      res.data &&\n        res.data.forEach((item) => {\n          item.user_pic = item.user_pic || require('@/assets/def.jpg')\n        })\n      // setobj({\n      //   total: res.total,\n      // })\n      setTotal(res.total)\n      setList(res.data)\n    }\n    if (isModalOpen) {\n      form.setFieldsValue({ ...recordobject })\n    } else {\n      getlistx()\n    }\n  }, [recordobject, search, currentPage])\n  return (\n    <>\n      <div className=\"btnbox\">\n        <Button onClick={showModal} type=\"primary\">\n          添加\n        </Button>\n        <Input onInput={(val) => setSearch(val.target.value)} value={search} />\n      </div>\n      <Table\n        rowKey=\"id\"\n        columns={columns}\n        dataSource={list}\n        pagination={{\n          total: total,\n          pageSize: pageSize,\n          onChange: onPageChange,\n        }}\n      />\n      <Modal\n        title={recordobject.id ? '编辑' : '添加'}\n        okButtonProps={{\n          style: {\n            display: 'none',\n          },\n        }}\n        cancelButtonProps={{\n          style: {\n            display: 'none',\n          },\n        }}\n        open={isModalOpen}\n        onCancel={() => {\n          setIsModalOpen(false)\n          setIsRecord({})\n          form.resetFields()\n        }}\n      >\n        <Form\n          name=\"xxx\"\n          form={form}\n          labelCol={{\n            span: 4,\n          }}\n          wrapperCol={{\n            span: 18,\n          }}\n          style={{\n            maxWidth: 600,\n          }}\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={handleOk}\n          onFinishFailed={onFinishFailed}\n          autoComplete=\"off\"\n        >\n          <Form.Item\n            label=\"账号\"\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: '请输入账号',\n              },\n              {\n                min: 6,\n                max: 12,\n                message: '请输入6-12位账号',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          {!recordobject.id && (\n            <Form.Item\n              label=\"密码\"\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: '请输入密码!',\n                },\n                {\n                  min: 6,\n                  max: 12,\n                  message: '请输入6-12位密码',\n                },\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n          )}\n\n          <Form.Item\n            label=\"昵称\"\n            name=\"nickname\"\n            rules={[\n              {\n                required: true,\n                message: '请输入昵称!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"邮箱\"\n            name=\"email\"\n            rules={[\n              {\n                required: true,\n                message: '请输入邮箱!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            wrapperCol={{\n              offset: 8,\n              span: 16,\n            }}\n          >\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n\nexport default Article\n"],"names":["Article","columns","title","dataIndex","width","render","data","_jsx","_Fragment","children","className","nickname","onError","e","target","src","require","alt","user_pic","_jsxs","Space","size","Button","type","shape","icon","EditOutlined","onClick","onEditinfo","Popconfirm","description","onConfirm","okText","cancelText","danger","DeleteOutlined","list","setList","useState","async","dellist","id","message","success","filter","item","isModalOpen","setIsModalOpen","setIsRecord","recordobject","form","Form","useForm","total","setTotal","currentPage","setcurrentPage","pageSize","setpageSize","search","setSearch","useEffect","setFieldsValue","res","getlist","forEach","getlistx","showModal","Input","onInput","val","value","Table","rowKey","dataSource","pagination","onChange","onPageChange","page","console","log","Modal","okButtonProps","style","display","cancelButtonProps","open","onCancel","resetFields","name","labelCol","span","wrapperCol","maxWidth","initialValues","remember","onFinish","values","editlist","status","error","concat","register","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","min","max","Password","offset","htmlType"],"sourceRoot":""}